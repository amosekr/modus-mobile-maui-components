using Microsoft.Maui.LifecycleEvents;
using Trimble.Modus.Components.Popup.Pages;

namespace Trimble.Modus.Components.Hosting
{
    /// <summary>
    /// Extensions for MauiAppBuilder
    /// </summary>
    public static class AppBuilderExtensions
    {
        /// <summary>
        /// Initializes the Trimble Modus Library
        /// </summary>
        /// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/> </param>
        /// <param name="options"><see cref="Options"/></param>
        /// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="CommunityToolkit.Maui"/></returns>
        public static MauiAppBuilder UseTrimbleModus(this MauiAppBuilder builder)
        {
            builder
                .ConfigureLifecycleEvents(lifecycle =>
                {
#if ANDROID
                    lifecycle.AddAndroid(d =>
                    {
                        d.OnBackPressed(activity => Droid.Implementation.AndroidPopups.SendBackPressed());
                    });

#endif
                })
                .ConfigureMauiHandlers(handlers =>
                {
                    handlers.AddHandler(typeof(BorderlessEntry), typeof(BorderlessEntryHandler));

#if ANDROID
                    handlers.AddHandler(typeof(PopupPage), typeof(PopupPageHandler));
#endif
#if IOS
                    handlers.AddHandler(typeof(PopupPage), typeof(Platforms.iOS.PopupPageHandler));
#endif
#if WINDOWS
                    handlers.AddHandler(typeof(PopupPage), typeof(Platforms.Windows.PopupPageHandler));
#endif
                });
            AllowMultiLineTruncation();

            return builder;
        }

        /// <summary>
        /// Automatically sets up lifecycle events and maui handlers, with the additional option to have additional back press logic
        /// </summary>
        /// <param name="builder"></param>
        /// <param name="backPressHandler"></param>
        /// <returns></returns>
        public static MauiAppBuilder ConfigurePopups(this MauiAppBuilder builder, Action? backPressHandler)
        {
            builder
                .ConfigureLifecycleEvents(lifecycle =>
                {
#if ANDROID
                    lifecycle.AddAndroid(d =>
                    {

                        d.OnBackPressed(activity => Droid.Implementation.AndroidPopups.SendBackPressed(backPressHandler));
                    });
#endif
                })
                .ConfigureMauiHandlers(handlers =>
                {
                    handlers.AddHandler(typeof(BorderlessEntry), typeof(BorderlessEntryHandler));
#if ANDROID
                    handlers.AddHandler(typeof(PopupPage), typeof(PopupPageHandler));
#endif
                });
            return builder;
        }
        public static void AllowMultiLineTruncation()
        {
            static void UpdateMaxLines(Microsoft.Maui.Handlers.LabelHandler handler, ILabel label)
            {
#if ANDROID
                var textView = handler.PlatformView;
                if (label is Label controlsLabel
                    && textView.Ellipsize == Android.Text.TextUtils.TruncateAt.End)
                {
                    textView.SetMaxLines(controlsLabel.MaxLines);
                }
#elif IOS
                var textView = handler.PlatformView;
                if (label is Label controlsLabel
                    && textView.LineBreakMode == UIKit.UILineBreakMode.TailTruncation)
                {
                    textView.Lines = controlsLabel.MaxLines;
                }
#endif
            };

            Label.ControlsLabelMapper.AppendToMapping(
               nameof(Label.LineBreakMode), UpdateMaxLines);

            Label.ControlsLabelMapper.AppendToMapping(
              nameof(Label.MaxLines), UpdateMaxLines);
        }
    }
}
